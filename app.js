// Generated by CoffeeScript 1.6.3
(function() {
  var Car, app, distance, min, random, sample, shuffle, sqrt;

  app = angular.module('app', []);

  random = function(a, b) {
    var _ref;
    if (b == null) {
      _ref = [0, a], a = _ref[0], b = _ref[1];
    }
    return Math.floor(Math.random() * (b - a) + a);
  };

  shuffle = function(o) {
    for(j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
    return o;
  };

  sample = function(array) {
    return array[random(array.length)];
  };

  distance = function(a, b) {
    var x_, y_, _ref;
    _ref = [b.x - a.x, b.y - a.y], x_ = _ref[0], y_ = _ref[1];
    return x_ * x_ + y_ * y_;
  };

  sqrt = function(a) {
    return Math.floor(Math.sqrt(a));
  };

  min = function(array) {
    var elt, ind, index, m, _i, _len, _ref, _ref1;
    _ref = [array[0], 0], m = _ref[0], ind = _ref[1];
    for (index = _i = 0, _len = array.length; _i < _len; index = ++_i) {
      elt = array[index];
      if (elt < m) {
        _ref1 = [elt, index], m = _ref1[0], ind = _ref1[1];
      }
      void 0;
    }
    return [m, ind];
  };

  Car = (function() {
    function Car(speed, smart, scope) {
      this.speed = speed;
      this.smart = smart;
      this.scope = scope;
      this.dist_on_route = 0;
      this.route = -1;
      this.inGarage = true;
      this.getDestination();
      this.init();
    }

    Car.prototype.init = function() {
      this.getPos();
      return this.checkGarage();
    };

    Car.prototype.getDestination = function() {
      var accessible;
      this.town = random(this.scope.towns.length);
      accessible = this.getAccessible();
      if (accessible.length < this.scope.parameters.min_path_length) {
        this.scope.error("Impossible de trouver des chemins assez longs depuis la ville " + this.town);
      }
      this.dest = sample(accessible);
      return this.getShortestPath();
    };

    Car.prototype.getAccessible = function() {
      var accessible, callback, callbacks, fun, self, tmp;
      tmp = this.scope.towns[this.town].accessible;
      if (tmp != null) {
        return tmp;
      }
      self = this;
      fun = function(visited, accessible, town, dist, callbacks) {
        var a, nexts, r, routes, _i, _len;
        if (visited.indexOf(town) !== -1) {
          return;
        }
        visited.push(town);
        if (dist >= self.scope.parameters.min_path_length) {
          accessible.push(town);
        }
        routes = self.scope.towns[town].routes;
        nexts = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = routes.length; _i < _len; _i++) {
            r = routes[_i];
            _results.push(self.scope.routes[r].dest);
          }
          return _results;
        })();
        for (_i = 0, _len = nexts.length; _i < _len; _i++) {
          a = nexts[_i];
          callbacks.push([fun, visited, accessible, a, dist + 1, callbacks]);
          void 0;
        }
        return void 0;
      };
      accessible = [];
      callbacks = [];
      fun([], accessible, this.town, 0, callbacks);
      while (callback = callbacks.shift()) {
        callback[0].apply(this, callback.slice(1));
      }
      return this.scope.towns[this.town].accessible = accessible;
    };

    Car.prototype.getShortestPath = function() {
      var alt, dist, i, previous, route, routes, tmp, towns, u, v, _, _i, _j, _len, _ref, _results;
      dist = (function() {
        var _i, _ref, _results;
        _results = [];
        for (_ = _i = 0, _ref = this.scope.towns.length; 0 <= _ref ? _i < _ref : _i > _ref; _ = 0 <= _ref ? ++_i : --_i) {
          _results.push(Infinity);
        }
        return _results;
      }).call(this);
      previous = (function() {
        var _i, _ref, _results;
        _results = [];
        for (_ = _i = 0, _ref = this.scope.towns.length; 0 <= _ref ? _i < _ref : _i > _ref; _ = 0 <= _ref ? ++_i : --_i) {
          _results.push(void 0);
        }
        return _results;
      }).call(this);
      dist[this.town] = 0;
      towns = (function() {
        _results = [];
        for (var _i = 0, _ref = this.scope.towns.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      while (towns.length) {
        tmp = (function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (i = _j = 0, _ref1 = this.scope.towns.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(towns.indexOf(i) === -1 ? Infinity : dist[i]);
          }
          return _results1;
        }).call(this);
        u = min(tmp)[1];
        towns.splice(towns.indexOf(u), 1);
        if (dist[u] === Infinity) {
          break;
        }
        routes = this.scope.towns[u].routes;
        for (_j = 0, _len = routes.length; _j < _len; _j++) {
          route = routes[_j];
          route = this.scope.routes[route];
          alt = dist[u] + (Math.floor(route.distance * ((u === this.town && this.scope.towns[u].info) || this.smart ? route.using + 1 : 1)) + 1);
          v = route.dest;
          if (alt < dist[v]) {
            dist[v] = alt;
            previous[v] = u;
          }
        }
      }
      this.path = [];
      u = this.dest;
      if (previous[u] == null) {
        return void 0;
      }
      while (previous[u] != null) {
        this.path.unshift(u);
        u = previous[u];
      }
      return this.path;
    };

    Car.prototype.update = function() {
      var next, r, route, routes;
      if (this.inGarage) {
        this.inGarage = false;
        routes = this.scope.towns[this.town].routes;
        next = this.path.shift();
        this.route = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = routes.length; _i < _len; _i++) {
            r = routes[_i];
            if (this.scope.routes[r].dest === next) {
              _results.push(r);
            }
          }
          return _results;
        }).call(this))[0];
      }
      route = this.scope.routes[this.route];
      this.dist_on_route += this.speed / (route.using + 1);
      if (this.dist_on_route > route.distance) {
        this.inGarage = true;
        this.town = route.dest;
        if (this.town === this.dest) {
          this.getDestination();
          this.scope.travels++;
        }
      }
      return this.init();
    };

    Car.prototype.getPos = function() {
      var angle, route, town, _ref, _ref1;
      if (this.inGarage) {
        town = this.scope.towns[this.town];
        return _ref = [town.x, town.y], this.x = _ref[0], this.y = _ref[1], _ref;
      } else {
        route = this.scope.routes[this.route];
        town = this.scope.towns[route.source];
        angle = this.scope.getAngle(route);
        return _ref1 = [town.x + Math.floor(Math.cos(angle) * this.dist_on_route), town.y + Math.floor(Math.sin(angle) * this.dist_on_route)], this.x = _ref1[0], this.y = _ref1[1], _ref1;
      }
    };

    Car.prototype.checkGarage = function() {
      if (this.inGarage) {
        if (this.scope.towns[this.town].info) {
          this.getShortestPath();
        }
        this.scope.towns[this.town].garage += 1;
        if (this.route !== -1) {
          this.scope.routes[this.route].using -= 1;
        }
        this.route = -1;
        return this.dist_on_route = 0;
      } else if (this.town !== -1) {
        this.scope.towns[this.town].garage -= 1;
        this.scope.routes[this.route].using += 1;
        return this.town = -1;
      }
    };

    return Car;

  })();

  app.controller('Ctrl', [
    '$scope', '$timeout', function($scope, $timeout) {
      var createTown, display, initCars, initRoutes, initSim, initTowns, resetGarages, resetUsing;
      createTown = function() {
        return {
          x: random($scope.parameters.width - 30),
          y: random($scope.parameters.height - 30),
          info: false,
          garage: 0,
          routes: []
        };
      };
      initTowns = function() {
        var cont, i, newTown, town, _i, _j, _len, _ref, _ref1, _results;
        $scope.towns = [];
        _results = [];
        for (i = _i = 0, _ref = $scope.parameters.nb_towns; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          cont = true;
          while (cont) {
            newTown = createTown();
            cont = false;
            _ref1 = $scope.towns;
            for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
              town = _ref1[_j];
              if (distance(newTown, town) < ($scope.parameters.min_distance * $scope.parameters.min_distance)) {
                cont = true;
              }
            }
          }
          _results.push($scope.towns.push(newTown));
        }
        return _results;
      };
      resetGarages = function() {
        var town, _i, _len, _ref, _results;
        _ref = $scope.towns;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          town = _ref[_i];
          town.garage = 0;
          _results.push(void 0);
        }
        return _results;
      };
      initRoutes = function() {
        var dest, dest_ind, distances, i, source, source_ind, _i, _j, _len, _ref, _ref1;
        $scope.routes = [];
        _ref = $scope.towns;
        for (source_ind = _i = 0, _len = _ref.length; _i < _len; source_ind = ++_i) {
          source = _ref[source_ind];
          distances = (function() {
            var _j, _len1, _ref1, _results;
            _ref1 = $scope.towns;
            _results = [];
            for (dest_ind = _j = 0, _len1 = _ref1.length; _j < _len1; dest_ind = ++_j) {
              dest = _ref1[dest_ind];
              if (source_ind !== dest_ind) {
                _results.push({
                  source: source_ind,
                  dest: dest_ind,
                  distance: sqrt(distance(source, dest)),
                  using: 0
                });
              }
            }
            return _results;
          })();
          distances.sort(function(a, b) {
            return a.distance - b.distance;
          });
          distances = distances.slice(0, $scope.parameters.farest_town);
          for (i = _j = 0, _ref1 = random($scope.parameters.min_routes, $scope.parameters.max_routes); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            source.routes.push($scope.routes.length);
            $scope.routes.push(distances.splice(random(distance.length), 1)[0]);
            void 0;
          }
          void 0;
        }
        return void 0;
      };
      resetUsing = function() {
        var route, _i, _len, _ref, _results;
        _ref = $scope.routes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          route = _ref[_i];
          route.using = 0;
          _results.push(void 0);
        }
        return _results;
      };
      initCars = function() {
        var i;
        return $scope.cars = (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = $scope.routes.length * $scope.parameters.car_ratio; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(new Car(random($scope.parameters.min_speed, $scope.parameters.max_speed), $scope.mode === 'smart_gps' && Math.random() < $scope.parameters.smart_ratio, $scope));
          }
          return _results;
        })();
      };
      initSim = function() {
        $scope.paused = true;
        $scope.step = 1;
        $scope.travels = 0;
        return $scope.errors = [];
      };
      $scope.init = function(reset) {
        $scope.modes || ($scope.modes = {
          no_info: "No info",
          with_info: "With some info",
          full_info: "Full info",
          smart_gps: "Smart GPS"
        });
        $scope.parameters || ($scope.parameters = {
          width: 1400,
          height: 500,
          nb_towns: 14,
          min_distance: 100,
          info_chance: 0.3,
          min_routes: 3,
          max_routes: 9,
          farest_town: 10,
          min_speed: 30,
          max_speed: 60,
          sim_slow: 1,
          car_ratio: 1,
          smart_ratio: 0.5,
          min_path_length: 2,
          benchmark_steps: 10000
        });
        initSim();
        if (reset) {
          initTowns();
          initRoutes();
        }
        resetGarages();
        resetUsing();
        initCars();
        $scope.changeMode();
        $scope.saves = window.saves;
        return $scope.dump = null;
      };
      $scope.save = function() {
        return $scope.dump = {
          parameters: $scope.parameters,
          towns: $scope.towns,
          routes: $scope.routes,
          benchmarks: $scope.benchmarks
        };
      };
      $scope.load = function(save) {
        $scope.parameters = save.parameters;
        $scope.init(true);
        $scope.towns = save.towns;
        $scope.routes = save.routes;
        $scope.init(false);
        return $scope.benchmarks = save.benchmarks;
      };
      display = function(obj, attributes) {
        var a, attr, list, tmp, _i, _j, _len, _len1;
        $scope.displayObj = {};
        for (_i = 0, _len = attributes.length; _i < _len; _i++) {
          attr = attributes[_i];
          list = attr.split('.');
          tmp = obj;
          for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
            a = list[_j];
            tmp = obj[a];
            $scope.displayObj[attr] = tmp;
            void 0;
          }
        }
        return void 0;
      };
      $scope.initBenchmark = function() {
        $scope.benchmarks = null;
        return $scope.showBenchmark = !$scope.showBenchmark;
      };
      $scope.benchmark = function() {
        var key, m, name, val, _, _i, _ref, _ref1, _ref2, _results;
        $scope.benchmarks = {};
        _ref = $scope.modes;
        for (key in _ref) {
          name = _ref[key];
          $scope.changeMode(key);
          $scope.init(false);
          for (_ = _i = 0, _ref1 = $scope.parameters.benchmark_steps; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; _ = 0 <= _ref1 ? ++_i : --_i) {
            $scope.nextStep();
          }
          $scope.benchmarks[key] = [($scope.travels / $scope.step).toFixed(3), 0];
        }
        $scope.init(false);
        m = min((function() {
          var _ref2, _results;
          _ref2 = $scope.benchmarks;
          _results = [];
          for (_ in _ref2) {
            val = _ref2[_];
            _results.push(val[0]);
          }
          return _results;
        })())[0];
        _ref2 = $scope.benchmarks;
        _results = [];
        for (_ in _ref2) {
          val = _ref2[_];
          _results.push(val[1] = Math.floor(val[0] * 100 / m));
        }
        return _results;
      };
      $scope.error = function(error) {
        if ($scope.errors.indexOf(error) === -1) {
          return $scope.errors.push(error);
        }
      };
      $scope.keys = function(obj) {
        if (obj != null) {
          return Object.keys(obj);
        }
      };
      $scope.displayRoute = function(route) {
        return display(route, ['source', 'dest', 'distance', 'using']);
      };
      $scope.displayTown = function(town) {
        return display(town, ['x', 'y', 'info', 'garage', 'routes']);
      };
      $scope.displayCar = function(car) {
        return display(car, ['speed', 'x', 'y', 'route', 'town', 'dist_on_route', 'dest', 'path']);
      };
      $scope.displayNone = function() {
        return $scope.displayObj = null;
      };
      $scope.displayParam = function(param) {
        return parseFloat($scope.parameters[param].toFixed(2));
      };
      $scope.changeInfo = function(town) {
        return town.info = !town.info;
      };
      $scope.changeMode = function(val) {
        var car, i, j, smart, town, _i, _j, _len, _len1, _ref, _ref1, _results;
        $scope.mode = val != null ? val : $scope.mode != null ? $scope.mode : 'no_info';
        smart = $scope.mode === 'smart_gps';
        j = 0;
        _ref = $scope.towns;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          town = _ref[i];
          town.info = (function() {
            switch ($scope.mode) {
              case 'with_info':
                return i * $scope.parameters.info_chance > j && (j += 1);
              case 'full_info':
                return true;
              default:
                return false;
            }
          })();
        }
        _ref1 = $scope.cars;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          car = _ref1[_j];
          car.smart = smart && (Math.random() < $scope.parameters.smart_ratio);
          _results.push(void 0);
        }
        return _results;
      };
      $scope.requireReset = function(name) {
        return ['nb_towns', 'min_distance', 'min_routes', 'max_routes', 'farest_town'].indexOf(name) !== -1;
      };
      $scope.requireInit = function(name) {
        return ['min_speed', 'max_speed', 'car_ratio', 'smart_ratio', 'min_path_length'].indexOf(name) !== -1;
      };
      $scope.changeParam = function(sign, name, val) {
        var change, reset;
        change = (val < 0.1 ? 0.01 : val < 0.2 ? 0.05 : val < 0.8 ? 0.1 : val < 0.9 ? 0.05 : val < 1 ? 0.01 : val < 2 ? 0.5 : val < 5 ? 1 : val < 20 ? 3 : val < 100 ? 10 : val < 200 ? 50 : val < 1000 ? 100 : val < 2000 ? 200 : void 0);
        $scope.parameters[name] += sign * change;
        reset = $scope.requireReset(name);
        if (reset || $scope.requireInit(name)) {
          return $scope.init(reset);
        }
      };
      $scope.getAngle = function(route) {
        var dest, source, _ref;
        _ref = [$scope.towns[route.source], $scope.towns[route.dest]], source = _ref[0], dest = _ref[1];
        return Math.atan2(dest.y - source.y, dest.x - source.x);
      };
      $scope.getCarAngle = function(route) {
        if ((route != null) && ($scope.routes[route] != null)) {
          return $scope.getAngle($scope.routes[route]) + Math.PI / 2;
        }
      };
      $scope.nextStep = function() {
        var car, _i, _len, _ref;
        _ref = $scope.cars;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          car = _ref[_i];
          car.update();
          void 0;
        }
        return $scope.step++;
      };
      $scope.loop = function() {
        if (!$scope.paused) {
          $scope.nextStep();
          return $timeout((function() {
            return $scope.loop();
          }), $scope.parameters.sim_slow);
        }
      };
      $scope.play = function() {
        $scope.paused = false;
        return $scope.loop();
      };
      return $scope.pause = function() {
        return $scope.paused = true;
      };
    }
  ]);

}).call(this);
